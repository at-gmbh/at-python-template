# templates
# ------------

.deploy-template:
  image: alpine:latest
  script:
    - echo "Deploying to ${CI_ENVIRONMENT_NAME}"
  variables:
    GIT_STRATEGY: none  # prevents fetching repo (we only need the artifact here)

# -------------
# Pipeline Definition

variables:
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  {%- if cookiecutter.package_manager == 'conda' %}
  CONDA_PKGS_DIRS: $CI_PROJECT_DIR/.cache/conda
  {%- elif cookiecutter.package_manager == 'poetry' %}
  POETRY_VERSION: 1.7.1
  POETRY_CACHE_DIR: $CI_PROJECT_DIR/.cache/poetry
  {%- endif %}

stages:
  - build
  - test
  - deploy-nonprod
  - deploy-prod

# Build and Test

{% if cookiecutter.package_manager == 'poetry' -%}
build-wheel:
  image: python:3.11
  stage: build
  artifacts:
    name: 'app-wheel'
    paths:
      - dist/{{ cookiecutter.module_name }}-*.whl
    expire_in: 6 mos
  script:
    - pip install poetry==$POETRY_VERSION
    - poetry build -f wheel{% else -%}
build-wheel:
  image: python:3.11
  stage: build
  artifacts:
    name: 'app-wheel'
    paths:
      - dist/{{ cookiecutter.module_name }}-*.whl
    expire_in: 6 mos
  script:
    - python setup.py bdist_wheel{%- endif %}

{% if cookiecutter.package_manager == 'poetry' -%}
test-unit:
  stage: test
  image: python:3.11
  cache:
    key:
      files:
        - poetry.lock
    paths:
      - $PIP_CACHE_DIR
      - $POETRY_CACHE_DIR
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  before_script:
    - pip install poetry==$POETRY_VERSION
    - poetry install --only=main,test
    - source `poetry env info --path`/bin/activate
  script:
    - pytest tests --cov src --cov-report=term --cov-report xml:coverage.xml{% elif cookiecutter.package_manager == 'conda' -%}
test-unit:
  stage: test
  image: continuumio/miniconda3
  cache:
    key:
      files:
        - environment.yml
        - environment-dev.yml
    paths:
      - $PIP_CACHE_DIR
      - $CONDA_PKGS_DIRS/*.tar.bz2
      - $CONDA_PKGS_DIRS/urls.txt
  before_script:
    - export PATH="/opt/conda/bin:$PATH"
    - conda env create -n .venv -f environment-dev.yml environment.yml
    - source activate .venv
    - pip install dist/{{ cookiecutter.module_name }}-*.whl
  script:
    - pytest tests{% elif cookiecutter.package_manager == 'pip' -%}
test-unit:
  stage: test
  image: python:3.11
  cache:
    key:
      files:
        - requirements.txt
        - requirements-dev.txt
    paths:
      - $PIP_CACHE_DIR
  before_script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -r requirements.txt -r requirements-dev.txt
    - pip install dist/{{ cookiecutter.module_name }}-*.whl
  script:
    - pytest tests{%- endif %}

# Nonprod deployments

dev:
  extends: .deploy-template
  stage: deploy-nonprod
  environment:
    name: dev
  only:
    - branches

# Prod deployment

prod:
  extends: .deploy-template
  stage: deploy-prod
  environment:
    name: prod
  only:
    - master
